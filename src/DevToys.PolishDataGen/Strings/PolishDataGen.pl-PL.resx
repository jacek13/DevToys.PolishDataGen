<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Umożliwia generowanie PESEL, NIP, REGON</value>
  </data>
  <data name="CliEnableMultithreading" xml:space="preserve">
    <value>Po włączeniu aplikacja uruchomi k = 1 + 3.3 * Log10(LICZBA_IDENTYFIKATORÓW) zadań</value>
  </data>
  <data name="CliIdType" xml:space="preserve">
    <value>Wybierz typ identyfikatora. Aktualnie dostępne opcje to: pesel | nip | regon | regon-long | identity-card-number</value>
  </data>
  <data name="CliInfoBarContent" xml:space="preserve">
    <value>Przy tak dużych liczbach zaleca się korzystanie z wersji CLI</value>
  </data>
  <data name="CliInfoBarTitle" xml:space="preserve">
    <value>Ostrzeżenie</value>
  </data>
  <data name="CliMultiLineTextInputTitle" xml:space="preserve">
    <value>Wyjście</value>
  </data>
  <data name="CliNumberPropertyDescription" xml:space="preserve">
    <value>Określa liczbę danych do wygenerowania</value>
  </data>
  <data name="CliOutputFilePath" xml:space="preserve">
    <value>Określa ścieżkę pliku wyjściowego</value>
  </data>
  <data name="CliValidatorDescription" xml:space="preserve">
    <value>Narzędzie umożliwia walidację polskich numerów identyfikacyjnych. Możliwe jest zwrócenie krótkiego lub szczegółowego opisu (lista błędów).</value>
  </data>
  <data name="CliValidatorExtendedDetailsDescription" xml:space="preserve">
    <value>Wyświetla szczegółową listę błędów walidacji</value>
  </data>
  <data name="CliValidatorInput" xml:space="preserve">
    <value>Wartość wejściowa do sprawdzenia</value>
  </data>
  <data name="CliValidatorIntegerAsResult" xml:space="preserve">
    <value>Umożliwia zwrócenie liczby całkowitej jako wyniku. 1 - Prawda, 0 - Fałsz, -1 - Błąd</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Biblioteka do generowania poprawnych polskich identyfikatorów: PESEL, NIP, REGON i inne. Idealna do testowania i walidacji systemów.</value>
  </data>
  <data name="GuiClearMemoryButtonLabel" xml:space="preserve">
    <value>Wyczyść pamięć</value>
  </data>
  <data name="GuiGenerateButtonLabel" xml:space="preserve">
    <value>Generuj</value>
  </data>
  <data name="GuiGeneratorDescription" xml:space="preserve">
    <value>Umożliwia generowanie polskich identyfikatorów: PESEL, NIP, REGON i innych.</value>
  </data>
  <data name="GuiIdTypeIdentityCardNumber" xml:space="preserve">
    <value>Numer dowodu osobistego</value>
  </data>
  <data name="GuiIdTypeNip" xml:space="preserve">
    <value>NIP</value>
  </data>
  <data name="GuiIdTypePesel" xml:space="preserve">
    <value>PESEL</value>
  </data>
  <data name="GuiIdTypeRegon" xml:space="preserve">
    <value>REGON (9 cyfr)</value>
  </data>
  <data name="GuiIdTypeRegonLong" xml:space="preserve">
    <value>REGON (14 cyfr)</value>
  </data>
  <data name="GuiNumberInputLabel" xml:space="preserve">
    <value>Liczba danych do wygenerowania</value>
  </data>
  <data name="GuiValidateButtonLabel" xml:space="preserve">
    <value>Waliduj</value>
  </data>
  <data name="GuiValidationDescription" xml:space="preserve">
    <value>Umożliwia walidację polskich numerów identyfikacyjnych. </value>
  </data>
  <data name="GuiValidationErrorTitle" xml:space="preserve">
    <value>Błąd walidacji</value>
  </data>
  <data name="GuiValidationIsInvalidLabel" xml:space="preserve">
    <value>jest nieprawidłowy</value>
  </data>
  <data name="GuiValidationIsValidLabel" xml:space="preserve">
    <value>jest prawidłowy</value>
  </data>
  <data name="GuiValidationLongDisplayTitle" xml:space="preserve">
    <value>Walidacja polskich danych</value>
  </data>
  <data name="GuiValidationSelectTypeLabel" xml:space="preserve">
    <value>Wybierz typ walidacji</value>
  </data>
  <data name="GuiValidationShortDisplayTitle" xml:space="preserve">
    <value>Walidacja polskich danych</value>
  </data>
  <data name="GuiValidationSuccessTitle" xml:space="preserve">
    <value>Sukces</value>
  </data>
  <data name="GuiValidationTextInputLabel" xml:space="preserve">
    <value>Wprowadź identyfikator</value>
  </data>
  <data name="IdentityCardControlNumberValidationMessage" xml:space="preserve">
    <value>Numer dowodu osobistego posiada nieprawidłowy numer kontrolny</value>
  </data>
  <data name="IdentityCardNumberExtremeValuesValidationMessage" xml:space="preserve">
    <value>Numer dowodu osobistego nie może składać się wyłącznie z cyfr 0 lub 9.</value>
  </data>
  <data name="IdentityCardNumberNotEmptyMessage" xml:space="preserve">
    <value>Numer dowodu osobistego musi zawierać jakąś wartość</value>
  </data>
  <data name="IdentityCardNumberNumericPartValidationMessage" xml:space="preserve">
    <value>Numer dowodu osobistego w części numerycznej powinien zawierać wyłącznie cyfry</value>
  </data>
  <data name="IdentityCardNumberPrefixPartValidationMessage" xml:space="preserve">
    <value>Numer dowodu osobistego w prefiksie musi zawierać wielkie litery</value>
  </data>
  <data name="IdentityCardNumberValidationLengthMessage" xml:space="preserve">
    <value>Numer dowodu osobistego musi składać się z 9 znaków</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>Generator polskich danych</value>
  </data>
  <data name="NipValidationControlNumberMessage" xml:space="preserve">
    <value>NIP posiada nieprawidłowy numer kontrolny</value>
  </data>
  <data name="NipValidationExtremeValuesMessage" xml:space="preserve">
    <value>NIP nie może składać się tylko z cyfr 0 lub 9</value>
  </data>
  <data name="NipValidationInvalidPrefix" xml:space="preserve">
    <value>NIP musi mieć jako prefiks (pierwsze 3 cyfry) istniejący numer urzędu skarbowego</value>
  </data>
  <data name="NipValidationLengthMessage" xml:space="preserve">
    <value>NIP musi składać się z 10 znaków</value>
  </data>
  <data name="NipValidationNotEmptyMessage" xml:space="preserve">
    <value>NIP musi zawierać jakąś wartość</value>
  </data>
  <data name="NipValidationOnlyDigitsMessage" xml:space="preserve">
    <value>NIP musi składać się wyłącznie z cyfr</value>
  </data>
  <data name="PeselValidationControlNumberMessage" xml:space="preserve">
    <value>PESEL posiada nieprawidłowy numer kontrolny</value>
  </data>
  <data name="PeselValidationDayRangeMessage" xml:space="preserve">
    <value>PESEL część zarezerwowana dla dni DD musi mieścić się w zakresie od 1 do 31</value>
  </data>
  <data name="PeselValidationExtremeValuesMessage" xml:space="preserve">
    <value>PESEL nie może składać się tylko z cyfr 0 lub 9</value>
  </data>
  <data name="PeselValidationLengthMessage" xml:space="preserve">
    <value>PESEL musi składać się z 11 znaków</value>
  </data>
  <data name="PeselValidationMonthRangeMessage" xml:space="preserve">
    <value>PESEL część zarezerwowana dla miesięcy MM musi mieścić się w zakresie od 1 do 12</value>
  </data>
  <data name="PeselValidationNotEmptyMessage" xml:space="preserve">
    <value>PESEL musi zawierać jakąś wartość</value>
  </data>
  <data name="PeselValidationOnlyDigitsMessage" xml:space="preserve">
    <value>PESEL musi składać się wyłącznie z cyfr</value>
  </data>
  <data name="PolishDataGenLabel" xml:space="preserve">
    <value>Generuj polskie identyfikatory</value>
  </data>
  <data name="RegonValidationControlNumberMessage" xml:space="preserve">
    <value>REGON posiada nieprawidłowy numer kontrolny</value>
  </data>
  <data name="RegonValidationExtremeValuesMessage" xml:space="preserve">
    <value>REGON nie może składać się tylko z cyfr 0 lub 9</value>
  </data>
  <data name="RegonValidationLengthMessage" xml:space="preserve">
    <value>REGON musi składać się z 9 lub 14 znaków</value>
  </data>
  <data name="RegonValidationNotEmptyMessage" xml:space="preserve">
    <value>REGON musi zawierać jakąś wartość</value>
  </data>
  <data name="RegonValidationOnlyDigitsMessage" xml:space="preserve">
    <value>REGON musi składać się wyłącznie z cyfr</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>Generator polskich danych</value>
  </data>
</root>