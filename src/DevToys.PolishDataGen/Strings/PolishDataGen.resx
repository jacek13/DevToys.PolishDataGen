<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Allows generation of PESEL, NIP, REGON</value>
  </data>
  <data name="CliEnableMultithreading" xml:space="preserve">
    <value>when enabled app will run k = 1 + 3.3 * Log10(Number) jobs</value>
  </data>
  <data name="CliIdType" xml:space="preserve">
    <value>Select id type. Current available options are: pesel | nip | regon | regon-long | identity-card-number</value>
  </data>
  <data name="CliInfoBarContent" xml:space="preserve">
    <value>With such large numbers it is recommended to use the CLI version</value>
  </data>
  <data name="CliInfoBarTitle" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="CliMultiLineTextInputTitle" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="CliNumberPropertyDescription" xml:space="preserve">
    <value>Defines the number of data to be generated</value>
  </data>
  <data name="CliOutputFilePath" xml:space="preserve">
    <value>define output file path</value>
  </data>
  <data name="CliValidatorDescription" xml:space="preserve">
    <value>The tool allows validation of Polish identification numbers. It is possible to return a short or detailed description (error list).</value>
  </data>
  <data name="CliValidatorExtendedDetailsDescription" xml:space="preserve">
    <value>Displays a detailed list of validation errors</value>
  </data>
  <data name="CliValidatorInput" xml:space="preserve">
    <value>Input field for value to be checked</value>
  </data>
  <data name="CliValidatorIntegerAsResult" xml:space="preserve">
    <value>Allows you to return an integer as the result. 1 - True, 0 - False, -1 - Error</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Library for generating correct Polish identifiers: PESEL, NIP, REGON and more. Perfect for testing and validating systems.</value>
  </data>
  <data name="GuiClearMemoryButtonLabel" xml:space="preserve">
    <value>Clear memory</value>
  </data>
  <data name="GuiGenerateButtonLabel" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="GuiNumberInputLabel" xml:space="preserve">
    <value>Number of data to generate</value>
  </data>
  <data name="GuiValidateButtonLabel" xml:space="preserve">
    <value>Validate</value>
  </data>
  <data name="GuiValidationDescription" xml:space="preserve">
    <value>Allows validation of Polish identification numbers. </value>
  </data>
  <data name="GuiValidationErrorTitle" xml:space="preserve">
    <value>Validation error</value>
  </data>
  <data name="GuiValidationLongDisplayTitle" xml:space="preserve">
    <value>Polish ids validation</value>
  </data>
  <data name="GuiValidationSelectTypeLabel" xml:space="preserve">
    <value>Select validation type</value>
  </data>
  <data name="GuiValidationShortDisplayTitle" xml:space="preserve">
    <value>Polish Data Validation</value>
  </data>
  <data name="GuiValidationSuccessTitle" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="GuiValidationTextInputLabel" xml:space="preserve">
    <value>Enter id</value>
  </data>
  <data name="GuiValidatorsGroupDisplayTitle" xml:space="preserve">
    <value>Validators</value>
  </data>
  <data name="IdentityCardControlNumberValidationMessage" xml:space="preserve">
    <value>IdentityCardNumber invalid control number</value>
  </data>
  <data name="IdentityCardNumberExtremeValuesValidationMessage" xml:space="preserve">
    <value>Identity Card Number cannot be composed only from 0 or 9 digits</value>
  </data>
  <data name="IdentityCardNumberNotEmptyMessage" xml:space="preserve">
    <value>Identity Card Number must contain some value</value>
  </data>
  <data name="IdentityCardNumberNumericPartValidationMessage" xml:space="preserve">
    <value>Identity Card Number numeric part should contains only digits</value>
  </data>
  <data name="IdentityCardNumberPrefixPartValidationMessage" xml:space="preserve">
    <value>Identity Card Number prefix must contain only upper ascii characters</value>
  </data>
  <data name="IdentityCardNumberValidationLengthMessage" xml:space="preserve">
    <value>Identity Card Number must be 9 characters long</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>Polish Data Generator</value>
  </data>
  <data name="NipValidationControlNumberMessage" xml:space="preserve">
    <value>NIP invalid control number</value>
  </data>
  <data name="NipValidationExtremeValuesMessage" xml:space="preserve">
    <value>NIP cannot be composed only from 0 or 9 digits</value>
  </data>
  <data name="NipValidationInvalidPrefix" xml:space="preserve">
    <value>NIP must have as a prefix (first 3 digits) the valid tax office number</value>
  </data>
  <data name="NipValidationLengthMessage" xml:space="preserve">
    <value>NIP must be 10 characters long</value>
  </data>
  <data name="NipValidationNotEmptyMessage" xml:space="preserve">
    <value>NIP must contain some value</value>
  </data>
  <data name="NipValidationOnlyDigitsMessage" xml:space="preserve">
    <value>NIP must contain only digits</value>
  </data>
  <data name="PeselValidationControlNumberMessage" xml:space="preserve">
    <value>PESEL invalid control number</value>
  </data>
  <data name="PeselValidationDayRangeMessage" xml:space="preserve">
    <value>PESEL Day part must be in range 1 to 31</value>
  </data>
  <data name="PeselValidationExtremeValuesMessage" xml:space="preserve">
    <value>PESEL cannot be composed only from 0 or 9 digits</value>
  </data>
  <data name="PeselValidationLengthMessage" xml:space="preserve">
    <value>PESEL must be 11 characters long</value>
  </data>
  <data name="PeselValidationMonthRangeMessage" xml:space="preserve">
    <value>PESEL Month part must be in range 1 to 12</value>
  </data>
  <data name="PeselValidationNotEmptyMessage" xml:space="preserve">
    <value>PESEL must contain some value</value>
  </data>
  <data name="PeselValidationOnlyDigitsMessage" xml:space="preserve">
    <value>PESEL must contain only digits</value>
  </data>
  <data name="PolishDataGenLabel" xml:space="preserve">
    <value>Generate Polish IDs</value>
  </data>
  <data name="RegonValidationControlNumberMessage" xml:space="preserve">
    <value>REGON invalid control number</value>
  </data>
  <data name="RegonValidationExtremeValuesMessage" xml:space="preserve">
    <value>REGON cannot be composed only from 0 or 9 digits</value>
  </data>
  <data name="RegonValidationLengthMessage" xml:space="preserve">
    <value>REGON must be 9 or 14 characters long</value>
  </data>
  <data name="RegonValidationNotEmptyMessage" xml:space="preserve">
    <value>REGON must contain some value</value>
  </data>
  <data name="RegonValidationOnlyDigitsMessage" xml:space="preserve">
    <value>REGON must contain only digits</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>Polish Data Gen</value>
  </data>
</root>